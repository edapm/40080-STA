#'
## ------------------------------------------------------------------------
gastro<-read.csv(file.choose(), header=T, separate=",")
#'
#' ### Importing a file
#' First, you will need to download the "gastro" file from Canvas and save it somewhere that you remember.
#' Import the data file:
#'
## ------------------------------------------------------------------------
gastro<-read.csv(file.choose(), header=T, sep=",")
View(gastro)
#'   differences in the number of eggs per capsule between zones. ***This is an independent comparison
#'   because individual capsules can only be in one of these two zones.***
#'
#' ### TASK
#'
#' Run some code that lets you examine the structure of the data, then run boxplots and histograms that
#' allow you to examine the number of eggs by zone.You will need the lattice package for the histogram code
#' and the psych package for the describe code.
#'
## ------------------------------------------------------------------------
str(gastro)
library(lattice)
library(psych)
describe(gastro)
View(gastro)
histogram(~eggs|zone,data=gastro, main="")
boxplot(gastro$eggs~gastro$zone,ylab="Number of Eggs",xlab="Zone")
#' What we really want is a function that lets us split the data by zone in the same way that we have
#' done for the plots. To do this, we can use the function "describeBY". Conveniently, this is also in
#' the psych package. ***Search for the describeBY function in the help window and you should see the help
#' page come up with all of the arguments that are contained in the function.*** Now, run the code below.
#'
## ------------------------------------------------------------------------
describeBy(gastro$eggs, gastro$zone)
#' You will see that we have the eggs first followed by the zone. The code mat=T just tells R to keep the
#' output in a convenient matrix so that we can compare them.
#'
#' ### QUESTION
#' What is your first thought on normality? non-normal
#'
#' Let's double check our answer by running a Shapiro-Wilk test. You should know how to do this by
#' using the tapply function:
#'
## ------------------------------------------------------------------------
tapply(gastro$eggs, gastro$zone, shapiro.test)
#' Next, we need to test for homogeneity of variance. First you will need to load in the car package
#' and then add the code to test for homogeneity (i.e. Levene's test).
#'
## ------------------------------------------------------------------------
library(car)
leveneTest(eggs~zone,data=gastro)
#'
#' ### QUESTION
#' Which test should we apply to see if there is a difference in the number of eggs found between zones?
#' Conduct the test below.
#'
## ------------------------------------------------------------------------
t.test(gastro$eggs~gastro$zone,var=TRUE)
t.test
#'
#' ### QUESTION
#' Which test should we apply to see if there is a difference in the number of eggs found between zones?
#' Conduct the test below.
#'
## ------------------------------------------------------------------------
t.test(gastro$eggs~gastro$zone,var.equal=TRUE)
?leveneTest(pc~meadow, data=meadow_pc, center=mean)
rm(list=ls())
library(lattice)
library(ggplot2)
library(pastecs)
library(car)
soil_type(A,A,A,A,B,B,B,B,C,C,C,C)
soil_type <- c(A,A,A,A,B,B,B,B,C,C,C,C)
soil_type <- c('A','A','A','A','B','B','B','B','C','C','C','C')
table1 <- data.frame(soil_type)
View(table1)
summary(table1)
soil_type <- c('A','A','A','A','B','B','B','B','C','C','C','C')
as.factor(soil_type)
table1 <- data.frame(soil_type)
soil_type <- c('A','A','A','A','A','B','B','B','B','B','C','C','C','C','C')
as.factor(soil_type)
crop_yield <- c(24,27,21,22,26,17,25,24,19,28,19,18,22,24,23)
table1 <- data.frame(soil_type, crop_yield)
View(table1)
mean(~crop_yield|soil_type, data=table1)
print(table1)
res<-aov(crop_yield~soil_type, data = table1)
res
summary(res)
boxplot(crop_yield~soil_type, data = table1)
View(res)
rm(list=ls())
cd messing-with-r
dat <- PlantGrowth #this is copying the dataset into an object called 'dat'
dat #this will print the dataset to your console / screen.
##We can look at the number of datapoints in each group.For ANOVA you generally
#don't want big differences in the size of the groups (although there is not
#really a hard rule on specific size differences)
table(dat$group) #they are all equal so no issues here
#install.packages("car") #use this line if you haven't installed the package before
library(car)
leveneTest(weight ~ group, data=dat, center=mean)
res <- aov(weight ~ group, data = dat) #the data argument is for us to tell R what our dataset object is called (so it can find the data!)
res
summary(res)
r <- residuals(res)
shapiro.test(r)
hist(r)
boxplot(weight ~ group, data = dat)
boxplot(weight ~ group, data = dat, col = "blue", xlab = "Experiment groups")
library(ggplot2)
ggplot(data = dat, aes(group, weight)) + geom_boxplot() +
stat_summary(fun = mean, geom="point", shape=20, size=10, color="red", fill="red")
TUKEY <- TukeyHSD(x=res) #res is our ANOVA object from above
TUKEY
plot(TUKEY , las=1 , col="brown")
##to illustrate this test we will use a new dataset called 'airquality' (Daily
#air quality measurements in New York, May to September 1973) use the head()
#function to look at the top of the data table.
head(airquality)
leveneTest(Ozone ~ as.factor(Month), data = airquality, center = mean)
kruskal.test(Ozone ~ as.factor(Month), data = airquality)
rm(list=ls())
dat <- read.csv(file.choose())
View(dat)
dat$Diet <- as.factor(dat$Diet)
head()
head(dat)
table(dat)
table(dat$Diet)
dat$weightLost <- dat$pre.weight - dat$weight6weeks
library(car)
leveneTest()
leveneTest(weightLost~Diet, data = dat, center = mean)
boxplot(weightLost~Diet, data=dat, center=mean, main="Weight loss from different diets", col="green")
res <- aov(weightLost~Diet, data=dat)
summary(res)
r <- residuals(res)
r <- residuals(res)
shapiro.test(r)
hist(r, xlab="Residuals")
TukeyHSD(res)
plot(tukey_out)
tukey_out <- TukeyHSD(x=res)
plot(tukey_out)
#make a boxplot
boxplot(height~Diet, data=dat, center-mean, main="Height of people on different diets", col="green")
#make a boxplot
boxplot(Height~Diet, data=dat, center-mean, main="Height of people on different diets", col="green")
#make a boxplot
boxplot(Height~Diet, data=dat, center=mean, main="Height of people on different diets", col="green")
#run the anova
res2 <- aov(Height~Diet, data=dat)
#extract and inspect the residuals
r2 <- residuals(res2)
shapiro.test(r2)
hist(r2, xlab="Residuals")
#run the kruskal wallis test
kruskal.test(Height~Diet, data=dat)
rm(list=ls())
library(lattice)
library(ggplot2)
library(pastecs)
library(car)
# create data frame
table2 <- as.data.frame(matrix(c(10,20,30,40,50,60,70,80,90,100), nrow = 2, byrow = TRUE))
View(table2)
rm(list=ls())
# create data frame
categories <- c("1 person", "2 people", "3 people", "4 or more")
exeter <- c(44, 81, 45, 30)
exmouth <- c(33, 40, 18, 9)
table2 <- data.frame(categories, exeter, exmouth)
View(table2)
sum_oneperson <- sum(table2$exeter[1], table2$exmouth[1])
exeter_size <- sum(table2$exeter)
exmouth_size <- sum(table2$exmouth)
total_size <- exeter_size + exmouth_size
expected_oneperson <- (exeter_size/total_size) * sum_oneperson
expected_oneperson_exeter <- expected_oneperson * exeter_size
expected_oneperson_exmouth <- expected_oneperson * exmouth_size
expected_oneperson <- (sum_oneperson/total_size) * 100
expected_oneperson_exeter <- expected_oneperson * exeter_size
expected_oneperson_exmouth <- expected_oneperson * exmouth_size
expected_oneperson_exeter <- (expected_oneperson / 100) * exeter_size
expected_oneperson_exmouth <- (expected_oneperson / 100) * exmouth_size
barplot(as.matrix(table2[,2:3]), beside = TRUE, col = c("blue", "red"))
legend("topright", c("Exeter", "Exmouth"), fill = c("blue", "red"))
library(ggplot2)
ggplot(table2, aes(x=categories, y=exeter, fill="Exeter")) + geom_bar(stat="identity", position="dodge") + geom_bar(aes(x=categories, y=exmouth, fill="Exmouth"), stat="identity", position="dodge")
ggplot(table2, aes(x=categories, y=exeter, fill="Exeter")) + geom_bar(stat="identity", position="dodge")
### produce clustered bar chart with table2
barplot(as.matrix(table2[,2:3]), beside = TRUE, col = c("blue", "red"), legend = rownames(table2))
chisq.test(table2$exeter, table2$exmouth)
chisq.test(table2)
chisq.test(table2$exeter, table2$exmouth)
View(table2)
chisq.test(table2$categories, table2$exeter, table2$exmouth)
chisq.test(table2$exeter, table2$exmouth)
chisq.test(table2$exeter[1], table2$exmouth[1])
chisq.test(table2$exeter[1,2,3,4], table2$exmouth[1,2,3,4])
chisq.test(table2$exeter, table2$exmouth)
View(table2)
# wrong result
chisq.test(table2$exeter, table2$exmouth, correct = FALSE)
# result should be 5.636
chisq.test(sum_oneperson, p=expected_oneperson)
# result should be 5.636
chisq.test(table2[1], p=expected_oneperson)
chisq.test(table2$exeter, table2$exmouth)
table2 <- data.frame(exeter, exmouth)
chisq.test(table2$exeter, table2$exmouth)
# exeter_oneperson is 44 rows of 1
exeter_oneperson <- c(rep(1, table2$exeter[1]))
exmouth_oneperson <- c(rep(1, table2$exmouth[1]))
table3 <- data.frame(exeter_oneperson, exmouth_oneperson)
table3 <- table(exeter_oneperson, exmouth_oneperson)
rm(list=ls())
library(lattice)
library(ggplot2)
library(pastecs)
library(car)
r
install.packages("bit")
license()
install.packages(c("bit", "rhub"))
#### The Sum of Squares Error (SSE)
dataset1 -> read.csv(file.choose(), header = T, sep = ",")
library(tidyverse)
dataset1 -> read.csv(file.choose(), header = T, sep = ",")
dataset1 -> read.csv(file.choose(), header = T, sep = ",")
dataset1<-read.csv(file.choose(), header = T, sep = ",")
View(dataset1)
# plot the data
ggplot(dataset1, aes(x = x, y = y)) + geom_point() + geom_smooth(method = "lm", se = FALSE)
View(dataset1)
# plot the data
ggplot(dataset1, aes(x = grain.diameter, y = average)) + geom_point() + geom_smooth(method = "lm", se = FALSE)
library(tidyverse)
dataset1<-read.csv(file.choose(), header = T, sep = ",")
# plot the data
ggplot(dataset1, aes(x = grain.diameter, y = average)) + geom_point() + geom_smooth(method = "lm", se = FALSE)
# plot the data
ggplot(dataset1, aes(x = grain.diameter, y = average, colour=classification)) + geom_point() + geom_smooth(method = "lm", se = FALSE)
install.packages(c("httr2", "Matrix", "quantreg", "readxl", "sparsevctrs", "units"))
# plot x = grain.diameter, y = group.1, group.2, group.3, group.4, group.5
dataset1 %>% ggplot(aes(x = grain.diameter, y = group.1)) + geom_point() + geom_smooth(method = "lm", se = F)
dataset1 %>% ggplot(aes(x = grain.diameter, y = group.1)) + geom_point() + geom_smooth(method = "lm", se = F)
dataset1 %>% ggplot(aes(x = grain.diameter, y = group.2)) + geom_point() + geom_smooth(method = "lm", se = F)
dataset1 %>% ggplot(aes(x = grain.diameter, y = group.3)) + geom_point() + geom_smooth(method = "lm", se = F)
dataset1 %>% ggplot(aes(x = grain.diameter, y = group.4)) + geom_point() + geom_smooth(method = "lm", se = F)
dataset1 %>% ggplot(aes(x = grain.diameter, y = group.5)) + geom_point() + geom_smooth(method = "lm", se = F)
# plot x = grain.diameter, y = group.1, group.2, group.3, group.4, group.5 on ONE graph
dataset1 %>%
pivot_longer(cols = c(group.1, group.2, group.3, group.4, group.5), names_to = "group", values_to = "value") %>%
ggplot(aes(x = grain.diameter, y = value, color = group)) +
geom_point() +
geom_smooth(method = "lm", se = F) +
labs(title = "Grain Diameter vs Group",
x = "Grain Diameter",
y = "Value") +
theme_minimal()
# plot x = grain.diameter, y = group.1, group.2, group.3, group.4, group.5 on ONE graph
dataset1 %>%
pivot_longer(cols = c(group.1, group.2, group.3, group.4, group.5, average), names_to = "group", values_to = "value") %>%
ggplot(aes(x = grain.diameter, y = value, color = group)) +
geom_point() +
geom_smooth(method = "lm", se = F) +
labs(title = "Grain Diameter vs Group",
x = "Grain Diameter",
y = "Value") +
theme_minimal()
# plot x = grain.diameter, y = group.1, group.2, group.3, group.4, group.5 on ONE graph
dataset1 %>%
pivot_longer(cols = c(group.1, group.2, group.3, group.4, group.5, average), names_to = "group", values_to = "value") %>%
ggplot(aes(x = grain.diameter, y = value, color = group)) +
geom_point() +
labs(title = "Grain Diameter vs Group",
x = "Grain Diameter",
y = "Value") +
theme_minimal()
# plot x = grain.diameter, y = group.1, group.2, group.3, group.4, group.5 on ONE graph
dataset1 %>%
pivot_longer(cols = c(group.1, group.2, group.3, group.4, group.5, average), names_to = "group", values_to = "value") %>%
ggplot(aes(x = grain.diameter, y = value, shape = group)) +
geom_point() +
labs(title = "Grain Diameter vs Group",
x = "Grain Diameter",
y = "Value") +
theme_minimal()
# plot x = grain.diameter, y = group.1, group.2, group.3, group.4, group.5 on ONE graph
dataset1 %>%
pivot_longer(cols = c(group.1, group.2, group.3, group.4, group.5, average), names_to = "group", values_to = "value") %>%
ggplot(aes(x = grain.diameter, y = value, color = group)) +
geom_point() +
labs(title = "Grain Diameter vs Group",
x = "Grain Diameter",
y = "Value") +
theme_minimal()
# plot x = grain.diameter, y = group.1, group.2, group.3, group.4, group.5 on ONE graph
dataset1 %>%
pivot_longer(cols = c(group.1, group.2, group.3, group.4, group.5), names_to = "group", values_to = "value") %>%
ggplot(aes(x = grain.diameter, y = value, color = group)) +
ggplot(aes(x = grain.diameter, y = average)) +
geom_point() +
labs(title = "Grain Diameter vs Group",
x = "Grain Diameter",
y = "Value")
# plot x = grain.diameter, y = group.1, group.2, group.3, group.4, group.5 on ONE graph
dataset1 %>%
pivot_longer(cols = c(group.1, group.2, group.3, group.4, group.5, average), names_to = "group", values_to = "value") %>%
ggplot(aes(x = grain.diameter, y = value, color = group)) +
geom_point() +
labs(title = "Grain Diameter vs Group",
x = "Grain Diameter",
y = "Value")
# plot x = grain.diameter, y = group.1, group.2, group.3, group.4, group.5 on ONE graph
dataset1 %>%
pivot_longer(cols = c(group.1, group.2, group.3, group.4, group.5, average), names_to = "group", values_to = "value") %>%
ggplot(aes(x = grain.diameter, y = value, color = group)) +
geom_point() +
geom_smooth(method = "lm", se = F) +
labs(title = "Grain Diameter vs Group",
x = "Grain Diameter",
y = "Value")
# plot x = grain.diameter, y = group.1, group.2, group.3, group.4, group.5 on ONE graph
dataset1 %>%
pivot_longer(cols = c(group.1, group.2, group.3, group.4, group.5, average), names_to = "group", values_to = "value") %>%
ggplot(aes(x = grain.diameter, y = value, color = group)) +
geom_point() +
labs(title = "Grain Diameter vs Group",
x = "Grain Diameter",
y = "Value")
# plot line of best fit for all groups combined
dataset1 %>%
pivot_longer(cols = c(group.1, group.2, group.3, group.4, group.5), names_to = "group", values_to = "value") %>%
ggplot(aes(x = grain.diameter, y = value, color = group)) +
geom_point() +
geom_smooth(method = "lm", se = F) +
labs(title = "Grain Diameter vs Group",
x = "Grain Diameter",
y = "Value")
# plot x = grain.diameter, y = group.1, group.2, group.3, group.4, group.5 on ONE graph
dataset1 %>%
pivot_longer(cols = c(group.1, group.2, group.3, group.4, group.5), names_to = "group", values_to = "value") %>%
ggplot(aes(x = grain.diameter, y = value, color = group)) +
geom_point() +
geom_smooth(method = "lm", se = F) +
labs(title = "Grain Diameter vs Group",
x = "Grain Diameter",
y = "Value")
ggplot(dataset1, aes(x = grain.diameter, y = average)) +
geom_point() +
geom_smooth(method = "lm", se = F) +
labs(title = "Grain Diameter vs Group 1",
x = "Grain Diameter",
y = "Average")
ggplot(dataset1, aes(x = grain.diameter, y = average)) +
geom_point() +
geom_smooth(method = "lm", se = F) +
labs(title = "Grain Diameter Average",
x = "Grain Diameter",
y = "Average")
ggplot(dataset1, aes(x = grain.diameter, y = average, color = classification)) +
geom_point() +
geom_smooth(method = "lm", se = F) +
labs(title = "Grain Diameter Average",
x = "Grain Diameter",
y = "Average")
# plot x = grain.diameter, y = group.1, group.2, group.3, group.4, group.5 on ONE graph
dataset1 %>%
pivot_longer(cols = c(group.1, group.2, group.3, group.4, group.5), names_to = "group", values_to = "value") %>%
ggplot(aes(x = grain.diameter, y = value, color = classification)) +
geom_point() +
geom_smooth(method = "lm", se = F) +
labs(title = "Grain Diameter vs Group",
x = "Grain Diameter",
y = "Value")
# plot x = grain.diameter, y = group.1, group.2, group.3, group.4, group.5 on ONE graph
dataset1 %>%
pivot_longer(cols = c(group.1, group.2, group.3, group.4, group.5), names_to = "group", values_to = "value") %>%
ggplot(aes(x = grain.diameter, y = value, color = classification)) +
geom_point() +
labs(title = "Grain Diameter vs Group",
x = "Grain Diameter",
y = "Value")
install.packages("Matrix")
dataset1<-read.csv(file.choose(), header = T, sep = ",")
density<-array[2.65, 2.23,2.23,2.65]
density<-array[2.65,2.23,2.23,2.65]
density<-c(2.65,2.23,2.23,2.65)
d_star1<-dataset1$grain.diameter[0]*(980.655(density[0] - 0.9982))^1/3
d_star1<-dataset1$grain.diameter[0]*(980.655*(density[0] - 0.9982))^1/3
d_star2<-dataset1$grain.diameter[1]*(980.655*(density[1] - 0.9982))^1/3
d_star1<-dataset1$grain.diameter[1]*(980.655*(density[0] - 0.9982))^1/3
d_star1<-dataset1$grain.diameter[1]*(980.655*(density[1] - 0.9982))^1/3
d_star2<-dataset1$grain.diameter[2]*(980.655*(density[2] - 0.9982))^1/3
d_star3<-dataset1$grain.diameter[3]*(980.655*(density[3] - 0.9982))^1/3
d_star4<-dataset1$grain.diameter[4]*(980.655*(density[4] - 0.9982))^1/3
print(dataset1$grain.diameter[1])
print(density[1])
d_star1<-dataset1$grain.diameter[1]*((980.655*(density[1] - 0.9982))/0.0101)^1/3
d_star1<-dataset1$grain.diameter[1]*((980.655*(density[1] - 0.9982))/0.0101^2)^1/3
dataset1$grain.diameter[1]*((980.655*(density[1] - 0.9982))/0.0101^2)^1/3
density[1] - 0.9982
980.655*(density[1] - 0.9982)
(980.655*(density[1] - 0.9982))/0.0101^2
(980.655*(density[1] - 0.9982)) / (0.0101)^2
0.6*(980.655*(density[1] - 0.9982)) / (0.0101)^2
d_star2<-dataset1$grain.diameter[2]*((980.655*(density[2] - 0.9982))/0.0101^2)^1/3
d_star3<-dataset1$grain.diameter[3]*((980.655*(density[3] - 0.9982))/0.0101^2)^1/3
d_star4<-dataset1$grain.diameter[4]*((980.655*(density[4] - 0.9982))/0.0101^2)^1/3
0.6*((980.655*(density[1] - 0.9982)) / (0.0101)^2)^(1/3)
d_star1<-dataset1$grain.diameter[1]*((980.655*(density[1] - 0.9982))/0.0101^2)^(1/3)
d_star2<-dataset1$grain.diameter[2]*((980.655*(density[2] - 0.9982))/0.0101^2)^(1/3)
d_star3<-dataset1$grain.diameter[3]*((980.655*(density[3] - 0.9982))/0.0101^2)^(1/3)
d_star4<-dataset1$grain.diameter[4]*((980.655*(density[4] - 0.9982))/0.0101^2)^(1/3)
dataset1<-read.csv(file.choose(), header = T, sep = ",")
View(dataset1)
d_star1<-dataset1$grain.diameter[1]*((980.655*(density[1] - 0.9982))/0.0101^2)^(1/3)
d_star2<-dataset1$grain.diameter[2]*((980.655*(density[2] - 0.9982))/0.0101^2)^(1/3)
d_star3<-dataset1$grain.diameter[3]*((980.655*(density[3] - 0.9982))/0.0101^2)^(1/3)
d_star4<-dataset1$grain.diameter[4]*((980.655*(density[4] - 0.9982))/0.0101^2)^(1/3)
# calc d_star for each sample (for i in density)
d_star<-array[d_star1, d_star2, d_star3, d_star4]
# calc d_star for each sample (for i in density)
d_star<-c(d_star1, d_star2, d_star3, d_star4)
# calculate critical shear stress of each sample
dataset1$tau_c <- tau_star*(density-0.9982)*980.655*dataset1$grain.diameter
tau_star<-c(0.047, 0.054, 0.066, 0.101)
# calculate critical shear stress of each sample
dataset1$tau_c <- tau_star*(density-0.9982)*980.655*dataset1$grain.diameter
View(dataset1)
# plot tau_c against average
ggplot(dataset1, aes(x=grain.diameter, y=tau_c)) + geom_point() + geom_smooth(method = "lm", se = F) + labs(title = "Critical shear stress vs grain diameter", x = "Grain diameter (mm)", y = "Critical shear stress (Pa)")
# plot tau_c against average
ggplot(dataset1, aes(x=average, y=tau_c)) + geom_point() + geom_smooth(method = "lm", se = F) + labs(title = "Critical shear stress vs stirrer setting", x = "Stirrer setting", y = "Critical shear stress (Pa)")
# plot tau_c against average
ggplot(dataset1, aes(x=average[2,3], y=tau_c)) + geom_point() + geom_smooth(method = "lm", se = F) + labs(title = "Critical shear stress vs stirrer setting", x = "Stirrer setting", y = "Critical shear stress (Pa)")
# plot tau_c against average
ggplot(dataset1[2,3], aes(x=average, y=tau_c)) + geom_point() + geom_smooth(method = "lm", se = F) + labs(title = "Critical shear stress vs stirrer setting", x = "Stirrer setting", y = "Critical shear stress (Pa)")
glass_beads<-c(dataset1[2],dataset1[3])
View(glass_beads)
# plot tau_c against average
ggplot(glass_beads, aes(x=average, y=tau_c)) + geom_point() + geom_smooth(method = "lm", se = F) + labs(title = "Critical shear stress vs stirrer setting", x = "Stirrer setting", y = "Critical shear stress (Pa)")
glass_beads<-(dataset1[2],dataset1[3])
glass_beads<-dataset1[2,3]
glass_beads<-filter(dataset1, classification == "glass beads")
View(glass_beads)
# plot tau_c against average
ggplot(glass_beads, aes(x=average, y=tau_c)) + geom_point() + geom_smooth(method = "lm", se = F) + labs(title = "Critical shear stress vs stirrer setting", x = "Stirrer setting", y = "Critical shear stress (Pa)")
# plot tau_c against average
ggplot(glass_beads, aes(x=average, y=tau_c)) + geom_point() + geom_path() + labs(title = "Critical shear stress vs stirrer setting", x = "Stirrer setting", y = "Critical shear stress (Pa)")
not_glass_beads<-filter(dataset1, classification != "glass beads")
ggplot(not_glass_beads, aes(x=average, y=tau_c)) + geom_point() + labs(title = "Critical shear stress vs stirrer setting", x = "Stirrer setting", y = "Critical shear stress (Pa)")
# plot tau_c against average
ggplot(dataset1, aes(x=average, y=tau_c)) + geom_point() + labs(title = "Critical shear stress vs stirrer setting", x = "Stirrer setting", y = "Critical shear stress (Pa)")
# plot tau_c against average
ggplot(dataset1, aes(x=average, y=tau_c, shape=classification)) + geom_point() + labs(title = "Critical shear stress vs stirrer setting", x = "Stirrer setting", y = "Critical shear stress (Pa)")
# plot tau_c against average
ggplot(dataset1, aes(x=average, y=tau_c, shape=classification)) + geom_point() + geom_line(classification == "glass beads") + labs(title = "Critical shear stress vs stirrer setting", x = "Stirrer setting", y = "Critical shear stress (Pa)")
# plot tau_c against average
ggplot(dataset1, aes(x=average, y=tau_c, shape=classification, group=classification)) + geom_point() + geom_line() + labs(title = "Critical shear stress vs stirrer setting", x = "Stirrer setting", y = "Critical shear stress (Pa)")
install.packages(c("cluster", "nloptr", "parsnip", "units"))
gc()
gc()
gc()
r.getVersion()
r version()
r getRversion()
getRversion()
gc()
rm(list=ls())
dat <- read.csv(file.choose())
setwd("~/Documents/University/Geography Degree/Year 1/Semester 2/40080 LC Statistics (STA)/Code/Week 8")
head(dat)
mod2 <- lm(CrimeRate10 ~ Wage10, data = dat)
fitted_values <- fitted(mod2)
plot(dat$CrimeRate10, dat$Wage10, pch = 16)
lines(dat$CrimeRate10, fitted_values, lwd=2, col="darkblue")
abline(0,1)
lines(dat$CrimeRate10, fitted_values)
plot(dat$Wage10, dat$CrimeRate10, pch = 16)
lines(dat$Wage10, fitted_values, lwd=2, col="darkblue")
abline(0,1)
new_data <- data.frame(Wage10 = 600)
predict(mod2, newdata = new_data)
new_data2 <- data.frame(Wage10 = 1000)
predict(mod2, newdata = new_data2)
plot(dat$Wage10, dat$CrimeRate10, pch = 16, xlim = c(0, 1100), ylim = c(0, 100))
points(1000, predict(mod2, newdata = new_data2), col = "green", pch = 16)
plot(dat$Wage10, dat$CrimeRate10, pch = 16, xlim = c(0, 1100), ylim = c(0, 100))
lines(dat$Wage10, fitted_values, lwd=2, col="darkblue")
points(1000, predict(mod2, newdata = new_data2), col = "green", pch = 16)
plot(dat$Wage10, dat$CrimeRate10, pch = 16, xlim = c(0, 1100), ylim = c(0, 1000))
lines(dat$Wage10, fitted_values, lwd=2, col="darkblue")
points(1000, predict(mod2, newdata = new_data2), col = "green", pch = 16)
plot(dat$Wage10, dat$CrimeRate10, pch = 16, xlim = c(0, 1100), ylim = c(0, 200))
lines(dat$Wage10, fitted_values, lwd=2, col="darkblue")
points(1000, predict(mod2, newdata = new_data2), col = "green", pch = 16)
plot(dat$Wage10, dat$CrimeRate10, col = dat$Southern)
plot(dat$Wage10, dat$CrimeRate10, pch=16, col = dat$Southern)
plot(dat$Wage10, dat$CrimeRate10, pch=16, shape = dat$Southern)
plot(dat$Wage10, dat$CrimeRate10, pch=16, col = "dat$Southern")
plot(dat$Wage10, dat$CrimeRate10, pch=16, col = dat$Southern)
dat$Southern <- as.factor(dat$Southern)
#Now have a go at using it in the plot function.
plot(dat$Wage10, dat$CrimeRate10, pch=16, col = dat$Southern)
rm(list=ls())
